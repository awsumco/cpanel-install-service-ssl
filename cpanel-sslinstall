#!/usr/bin/env python

import optparse,re,os,base64,urllib2,httplib,sys,urllib,ssl,json
from termcolor import colored
httplib.HTTPConnection.debuglevel = 1

def checkRequiredArguments(opts, parser):
    missing_options = []
    for option in parser.option_list:
        if re.match(r'^\[REQUIRED\]', option.help) and eval('opts.' + option.dest) == None:
            missing_options.extend(option._long_opts)
    if len(missing_options) > 0:
        parser.error('Missing REQUIRED parameters: ' + str(missing_options))

def readFile(fn):
	f = open(fn,"r")
	x = f.read()
	f.close()
	return x

def jsondecode(json_input):
    import json
    try:
        decoded = json.loads(json_input)
        # pretty printing of json-formatted string
        return json.dumps(decoded, sort_keys=True, indent=2)
 
    except (ValueError, KeyError, TypeError):
        return "JSON format error"

def writelog(name,msg):
    home = os.path.expanduser("~")
    logdir = home + "/.logs/"
    if not os.path.isdir(logdir):
        os.mkdir(logdir)
    f = open(logdir + "/" + name, "w")
    f.write(msg)
    f.close()


def restartService(hostname,user,passwd,service):

    if service == "cpanel":
        service = "cpsrvd"
    if service == "ftp":
        service = "pureftpd"
    if service == "dovecot":
        service = "imap"

    ssl._create_https_context = ssl._create_unverified_context
    authstring="%s:%s" % (user,passwd)
    auth="Basic " + base64.b64encode(authstring)
    
    url = "https://%s:2087/json-api/restartservice?api.version=1&service=%s" % (hostname,service)

    """
    /json-api/restartservice?api.version=1&service=exim
    """
    request = urllib2.Request(url)
    request.add_header('Authorization', auth)
    opener = urllib2.build_opener(urllib2.HTTPSHandler(context=ssl._create_unverified_context()))
    whmdata = opener.open(request).read()
    return jsondecode(whmdata)

def installSslService(hostname,user,passwd,service,keys):
    ssl._create_https_context = ssl._create_unverified_context
    authstring="%s:%s" % (user,passwd)
    auth="Basic " + base64.b64encode(authstring)
    
    crt_data=readFile(keys['crt'])
    ca_data=readFile(keys['ca'])
    key_data=readFile(keys['key'])
    # print ca_data
    keydata = urllib.urlencode({'crt': crt_data, 'cabundle': ca_data, 'key': key_data})
    
    url = "https://%s:2087/json-api/install_service_ssl_certificate?api.version=1&service=%s" % (hostname,service)

    """
    https://documentation.cpanel.net/display/SDK/WHM+API+1+Functions+-+install_service_ssl_certificate
    /json-api/install_service_ssl_certificate?api.version=1&service=exim&crt=CERTIFICATETEXT&cabundle=CABUNDLETEXT&key=KEYTEXT
    /xml-api/install_service_ssl_certificate?api.version=1&service=exim&crt=CERTIFICATETEXT&cabundle=CABUNDLETEXT&key=KEYTEXT
    """
    request = urllib2.Request(url, keydata)
    request.add_header('Authorization', auth)
    opener = urllib2.build_opener(urllib2.HTTPSHandler(context=ssl._create_unverified_context()))
    whmdata = opener.open(request).read()

    return jsondecode(whmdata)

def processCSV(csvFile):
    import csv

    csv_file = csv.DictReader(open(csvFile, 'rb'), delimiter=',', quotechar="'")
    for line in csv_file:
        print colored(line['hostname'] + " :: Start", 'green')
        files = {}
        files['crt'] = line['crt']
        files['key'] = line['key']
        files['ca'] = line['cabundle']
        for name , fn in files.items():
            if not os.path.isfile(fn):
                exit(fn + ' file is missing.')
        print colored(line['hostname'] + " :: Installing SSL", 'green')
        output = installSslService(line['hostname'],line['username'],line['password'],line['service'],files)
        writelog(line['hostname'] + "-" + line['service'] + "-install.json",jsondecode(output))
        print colored(line['hostname'] + " :: restarting " + line['service'], 'green')
        #output2 = restartService(line['hostname'],line['username'],line['password'],line['service'])
        #writelog(line['hostname'] + "-" + line['service'] + "-restart.json",jsondecode(output2))
        print colored(line['hostname'] + " :: Done", 'green')

def main():
        p = optparse.OptionParser(description='Install Service SSL on a cPanel Server via Command Line.',
                                    prog='cpanel-install-service-ssl',
                                    version='cpanel-install-service-ssl 0.1',
                                    usage='%prog -h')

        p.add_option("--hostname", dest="hostname", type="string", help="[REQUIRED] The hostname of the host you intend on installing the SSL cert on.")
        p.add_option("--username", dest="username", type="string", help="WHM username, normally root. If not supplied will use root")
        p.add_option("--password", dest="password", type="string", help="[REQUIRED] Password of the user.")
        p.add_option("--service", dest="service", type="string", help="[REQUIRED] These services are ftp, exim, dovecot, courier, and cpanel.")
        p.add_option("--crt", dest="crt", type="string", help="[REQUIRED] Path to the KEY .crt file.")
        p.add_option("--key", dest="key", type="string", help="[REQUIRED] Path to the KEY .key file.")
        p.add_option("--ca", dest="ca", type="string", help="[REQUIRED] Path to the KEY .cabundle file.")
        p.add_option("--csv", dest="csvfile", type="string", help="Batch update, csv file with: 'hostname','username','password','service','crt','cabundle','key'")

        options, arguments = p.parse_args()

        if options.csvfile:
            processCSV(options.csvfile)
            exit()

        checkRequiredArguments(options, p)

        files = {}
        files['crt'] = options.crt
        files['key'] = options.key
        files['ca'] = options.ca

        for name , fn in files.items():
        	if not os.path.isfile(fn):
        		p.error(name + ' file is missing.')
        
        if not options.username:
        	options.username = "root"
        print installSslService(options.hostname,options.username,options.password,options.service,files)
        print restartService(options.hostname,options.username,options.password,options.service)

if __name__ == '__main__':
        main()
